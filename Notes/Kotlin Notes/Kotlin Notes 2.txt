STRING

Yaklaşık olarak her karakter başına 2 byte yer kaplar.
UTF-16 Encoding kullanılır.
Çift tırnak içerisine yazılan karakterler bütünüdür.
Bir string ifadenin tüm karakterlerini tek tek alıp char bir listeye atabilirsiniz.
Stringler immutable'dır. Bir string ilk değer ataması yapıldıktan sonra değerini değiştiremez ya da yeni bir değer set edilemez.
String üzerinde yapacağınız her işlem size yeni bir String objesi dönecektir. Stringin ilk hali değişmeyecektir. Stringler stackte değişkeni tutar value ise heapte tutulur.

Farklı tipteki bir değişkenin önüne string bir değişkeni ya da ifade koyarak toplarsanız, sonuç string olacaktır. Ancak bir string değişken ya da ifadenin sonuna + operatoru ile farklı tipte bir değişken eklerseniz, kod çalışmaz.

Herhangi bir değişkenin + operatörüne ihtiyaç duyulmadan direkt olarak " " arasına yazılarak kullanılabilir. Bunun için sadece $ işaretine ihtiyacınız vardır. Bu yapıya String template denir. Eğer değişkenin bir özelliğine ihtiyaç duyacaksanız ${ } şeklinde kullanılır.

3 tane çift tırnak kullanarak Row String (Multiline String) oluşturulabilir. 
Row Stringler ideye nasıl yazılıyorsa öyle kullanılır. Hizalamada bozulma olmaz.
trimIndent() fonksiyonu ile bu Row String'in kenar boşluklarını silebilirsiniz. Bu silme işlemini yaparken tüm satırlardaki en soldaki karakteri baz alarak silme işlemini sağlar. Row Stringlerin içinde escape karakterler çalışmaz. İş görüşmelerinde Row sorusu kesin gelir. Ama bunu for döngüsüyle yap. Senden row istemezler.

String.format() methodu, Javanın String.format() methoduna çok benzer şekilde çalışır. Bu metod, belirli bir string içinde yer tutucuları belirtilen değerlerle değiştirerek yeni bir string oluşturmanıza olanak tanır. Yer tutucuları formatlama belirtimleriyle tanımlanır ve bu belirtimler, değiştirilecek değerlerin nasıl biçimlendirileceği kontrol eder.
%s -> string, %f -> float/double
%d -> tam sayı, %n ->Yeni bir satır 

ARRAY

Aynı türden ya da belirtilen türün alt türlerinden, sabit sayıda veri tutan bir veri yapısıdır.
En sık kullanılan Object-Type Arrayler'dir.
Eğer primitive tipleri Object-Type Array olarak kullanırsanız, boxed kullanım yapmış olursunuz. Bu da performansa etki eder.
Eğer sadece primitive verilerden oluşan arrayler oluşturacaksanız bu durumda Primitive Type Arrayler kullanın. ByteArray(byte[]), ShortArray(short[]), IntArray(Int[]), LongArray(long[]), DoubleArray(double[]), FloatArray(float[]), BooleanArray(boolean[]), CharArray(char[]) gibi.
joinToString array içindeki her parametreyi alıp string olarak gönderir.

arrayOf(aynı tip değerler) şeklinde tanımlanabilir.
arrayOf<Any>(farklı tip değerler) şeklinde tanımlanabilir.
arrayOfNulls<Type>(size) şeklinde verilen size değeri kadar null değer içeren array tanımlanabilir.Burada değişken tipinin verilmesine gerek yoksa nothing? Olarak işaretler.
emptyArray() boş array tanımlar.

Arrayler sabit büyüklüktedirler. Arraylere ekleme ve çıkarma yapmak aynı Stringlerde olduğu gibi memory'de yeni bir array oluşturulmasına neden olur.
Arraylere ekleme yaparken repeat kullanımı önerilmez.
Arrayler var olup değiştiği için mutabledır ama array ekleme yaptığında yeni bir array oluşacağı için immutabledır.
EmptyArray 0 indexlidir, elemanı yoktur, eleman ekleyemezsin.
EmptyArray'e yeni bir array atayıp kullanabilirsiniz, veya += yaparak eleman ekleyebilirsiniz ama bu durumda da ilk durumdaki gibi heapte yeni bir array oluşturur.
Array<Type>(size){ higher order func } şeklinde de tanımlanabilir. Bu durumda higher order func içerisinde son satıra denk gelen değerler diziyi oluşturur.
ByteArray, ShortArray, IntArray, LongArray, DoubleArray, FloatArray gibi ya da bunların unsigned halleri ile primitive array tanımlamaları da yapılabilir.
Primitive type arrayDE .toTypedArray() fonksiyonu ile Primitive Type bir array Object-Typed bir array dönüştürülür.
.toCharArray() gibi fonksiyonlar ile object type bir array primitive type array dönüştürülür.

Bu tarz tanımlamalarda ilgili index değerine atama için set(index, value) ya da [index]=value kullanılabilir.
Bu tarz tanımlamalarda ilgili index değerindeki değişken değerine get(index) ya da [index] şeklinde ulaşılabilir.

Val ile tanımlanmış bir arrayın herhangi bir indexindeki değer değiştirilebilir.
Val indexdeki değerlerin değişmesine karışmaz. Ancak ilgili diziyi başka bir dizi ile eşitlemenize izin verilmez.
Bunu yapmak için tanımlamayı var ile değiştirmeniz gerekir.
Arrayın size dışına çıkarsanız indexOutOfBounds hatasını alırsınız.

Invariant Array 
Arrayler üst classları yerine atanamazlar.
String olan arraye any değişken atayamazsın. Yani Arrayler üst classı, child class yerine kullanılamıyor.
+array ile arrayleri genişletmek performans açısından sorun olur.

Eğer bir tabloda ekleme silme yapacaksanız o tabloyu Collections ile kullanın sadece tabloyu gösterecekseniz array kullanmak avantajlı.

Vararg kelimesi ile istediğimiz sayıda parametreyi kabul edebiliriz. Eğer vararg'a denk gelecek şekilde bir array kullanmak istiyorsanız, "Spread" "*" operatoru kullanırız. Spread operatoru verdiğiniz arrayın elemenlarının herbirinin bir variable olacak şekilde parametre olarak passlar.
Arrayleri karşılaştırırken == operatoru kullanamazsınız, contentEquals (tek boyutlular için) ya da contentDeepEquals (çok boyutlular için) kullanmanız lazım.

Arrayleri list'e ve set'e dönüştürebilirsiniz. Maplere de dönüştürebilirsiniz, ancak bunun için arrayın özel olarak Pair<K,V> formunda olması lazım.

RANGE
Sonlu sayılı liste oluşturmaya yarar.
Küçükten büyüğe liste oluşturmak için ".." Operatörünü ya da rangeTo() fonksiyonunu kullanabilirsiniz. "..<" operatörü ya da rangeUntil() fonksiyonu ile son sayının dahil olmasını istemediğiniz durumlarda kullanabilirsiniz.
Charlarda oluşan bir liste de tanımlanabilir. Türkçe karakterleri içermez.
Step fonksiyonu kullanarak liste oluşturulurken belli sayıda atlamalar yapabilirsiniz.
CharRange, IntRange ve LongRange, isimlerine özel rangeler vardır, Progression olarak adlandırılır. Diğer değişken tiplerine olmamasının sebebi virgülden sonrası  sonsuz sayı içereceği için mesela double ve floatta bu duruma rastlanır.
Bu progressionlar ile first, list, step, count gibi ek bilgiler alınabilir. Iterable <N> interface implement etmişlerdir. O sebeple map filter gibi fonksiyonları kullanabilirler.

CONTROL FLOW
++ önde ise arttırıp yazdırır. ++ sonda ise önce yazdırır sonra arttırır. CompareTo fonksiyonunda sayı karşılaştırılan sayıdan büyükse -1, küçükse +1, eşitse 0 çıktısını verir. Eğer karşılaştırma yapılan iki sayıdan biri nullable ise fonksiyon kullanmak daha mantıklı, çünkü operatörler null check yapmaz, fonksiyonlar yapar. 
Stringler içine aktarma işlemine izin verilmez. Tek + ve -, pozitif mi negatif mi olduğunu belirtir.

If-Else
If-Else caselerinin state ve expression olmak üzere 2 kullanımı vardır. 
State kullanımı sadece if else kullanarak şartlı durumlarımızı kodlamaktır.
Expression kullanımı ise bir value'ya değer olarak eşitliğin karşı tarafına if else kodlarını yazmaktır.
Else if yazmadan else içine direkt if yazmak performans sorunu yaratır.
Kotlin'de if elselerin Expression kullanımında ötürü ternary operatörü : yoktur.
2 farklı tipteki Number değişkenler karşılaştırırken equals fonksiyonu önce tiplerini karşılaştırdığı için eğer tipler uyuşmuyorsa, ide hata verecektir.
Bazı durumlarda if else yazmaktansa, if case'ini yazıp return ya da throw gibi kodun devam etmesini bozacak ifadelerle kodu sonlandırabilirsiniz. Kod çalışırken bu if case'ine girmezse devam eden kod bloğu çalışır ki bu da pratikte else case'i demek olur.
If case'İn iki tane değişkeni kontrol ediyorsan else ifte aynı değişkenleri kontrol etmelisin. If case içinde kontrol etmediğin değişkeni else ifte kullanma.

When
Switch caselerin yerine yazılır.
when(karşılaştırılabilecek-ifade){
Value -> { }
Value -> { }
Else -> { }
}

* { } arasına tek satır kod yazılacaksa bu durumda { }leri kullanmayabilirsin.
"TR", "AZ" gibi aynı kodu çalıştıracak caseler varsa araya virgül koyarak kullan.
When yanına karşılaştırma ifadesi eklemeden, bunu caselerin yanına da ekleyebilirsiniz. Bunun artısı &&, ||, and, or, xor gibi ifadeleri kullanabilirsiniz.
 is, !is ile bir classın referansı olunup olunmadığı kontrolu yapılabilir.
Ranglerin in !in şeklinde kontrolu yapılabilir. 

For
3 farklı şekilde for tanımlanabilir.
Value in list -> şeklinde value değerlerini alabilirsiniz.
Index in list.indices -> şeklinde index değerlerini alabilirsiniz.
(Index,value) in list.withIndex() -> şeklinde index, value değerlerini alabilirsiniz.
repeat(size) şeklinde herhangi bir listeye ihtiyaç duymadan tekrarlayan işler yapabilirsiniz.
Return kullanarak ilgili şart sağlanırsa döngüden çıkabilirsiniz.
Continue kullanarak ilgili şart sağlanırsa, döngüye o değeri atlayarak devam edebilirsiniz.
İç içe for döngüleri kullanıyorsak bir üstteki for'a değil de iki üstteki veya üç üstteki for'a dönmek istiyorsak label kullanabiliriz, bunun için labelname@ ifadesini ilgili forun önüne yazıp, return ya da continue demeliyiz.

While
Eğer bir döngüye ihtiyacınız varsa ve bu döngü sırasında if else ile bir şartlı duruma ihtiyacınız varsa for+if else yerine while kullanabilirsin.
Return mainden çıkartır, break döngüden çıkartır.


